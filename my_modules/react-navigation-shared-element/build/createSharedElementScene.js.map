{"version":3,"file":"createSharedElementScene.js","sourceRoot":"","sources":["../src/createSharedElementScene.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Route, NavigationState } from \"@react-navigation/native\";\nimport {\n  StackNavigationProp,\n  StackCardInterpolationProps,\n} from \"@react-navigation/stack\";\nimport hoistNonReactStatics from \"hoist-non-react-statics\";\nimport * as React from \"react\";\nimport { View, StyleSheet, InteractionManager } from \"react-native\";\nimport { nodeFromRef } from \"react-native-shared-element\";\n\nimport { ISharedElementRendererData } from \"./SharedElementRendererData\";\nimport SharedElementSceneContext from \"./SharedElementSceneContext\";\nimport SharedElementSceneData from \"./SharedElementSceneData\";\nimport {\n  SharedElementEventSubscription,\n  SharedElementSceneComponent,\n  SharedElementRoute,\n  SharedElementsComponentConfig,\n} from \"./types\";\nimport { EventEmitter } from \"./utils/EventEmitter\";\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n\ntype PropsType = {\n  navigation: StackNavigationProp<any>;\n  route: SharedElementRoute;\n};\n\nfunction isValidNavigationState(\n  state: Partial<NavigationState>\n): state is NavigationState {\n  return \"index\" in state && \"routes\" in state;\n}\n\n// Gets the current screen from navigation state\nfunction getActiveRoute(state: NavigationState): Route<any> {\n  const route = state.routes[state.index];\n  return route.state && isValidNavigationState(route.state)\n    ? getActiveRoute(route.state) // Dive into nested navigators\n    : route;\n}\n\nfunction isActiveRoute(\n  navigation: StackNavigationProp<any>,\n  route: Route<any>\n): boolean {\n  const state = navigation.dangerouslyGetState();\n  const activeRoute = getActiveRoute(state);\n  return route.name === activeRoute.name;\n}\n\nfunction createSharedElementScene(\n  Component: SharedElementSceneComponent,\n  sharedElements: SharedElementsComponentConfig | void,\n  rendererData: ISharedElementRendererData,\n  emitter: EventEmitter,\n  AnimationContext: React.Context<StackCardInterpolationProps | undefined>,\n  navigatorId: string,\n  verbose: boolean\n): React.ComponentType<any> {\n  const config = {\n    Component,\n    sharedElements,\n    rendererData,\n    AnimationContext,\n    navigatorId,\n    verbose,\n  };\n\n  class SharedElementSceneView extends React.PureComponent<PropsType> {\n    private subscriptions: {\n      [key: string]: SharedElementEventSubscription;\n    } = {};\n    private sceneData: SharedElementSceneData = new SharedElementSceneData(\n      Component,\n      () => config.sharedElements || Component.sharedElements,\n      this.props.route,\n      navigatorId,\n      rendererData.nestingDepth,\n      verbose\n    );\n\n    static readonly config = config;\n\n    componentDidMount() {\n      const { navigation } = this.props;\n      this.subscriptions = {\n        willFocus: emitter.addListener(\"focus\", this.onWillFocus),\n        willBlur: emitter.addListener(\"blur\", this.onWillBlur),\n        transitionStart: navigation.addListener(\n          \"transitionStart\",\n          this.onTransitionStart\n        ),\n        transitionEnd: navigation.addListener(\n          \"transitionEnd\",\n          this.onTransitionEnd\n        ),\n      };\n    }\n\n    private onTransitionStart = (event: any) => {\n      const closing: boolean = event.data.closing;\n      //console.log(\"onTransitionStart: \", event.data);\n      rendererData.startTransition(\n        closing,\n        navigatorId,\n        rendererData.nestingDepth\n      );\n      //console.log(\"onTransitionStart: \", this.sceneData);\n      //rendererData.updateSceneState(this.sceneData, \"willFocus\");\n    };\n\n    private onTransitionEnd = ({ data: { closing } }: any) => {\n      rendererData.endTransition(\n        closing,\n        navigatorId,\n        rendererData.nestingDepth\n      );\n    };\n\n    componentWillUnmount() {\n      Object.values(this.subscriptions).forEach((unsubscribe) => unsubscribe());\n    }\n\n    render() {\n      // console.log('SharedElementSceneView.render');\n      return (\n        <SharedElementSceneContext.Provider value={this.sceneData}>\n          <View\n            style={styles.container}\n            collapsable={false}\n            ref={this.onSetRef}\n          >\n            <AnimationContext.Consumer>\n              {this.onRenderAnimationContext}\n            </AnimationContext.Consumer>\n            <Component {...this.props} />\n          </View>\n        </SharedElementSceneContext.Provider>\n      );\n    }\n\n    private onRenderAnimationContext = (\n      value: StackCardInterpolationProps | undefined\n    ) => {\n      this.sceneData.setAnimimationContextValue(value);\n      return null;\n    };\n\n    componentDidUpdate() {\n      this.sceneData.updateRoute(this.props.route);\n    }\n\n    private onSetRef = (ref: any) => {\n      this.sceneData.setAncestor(nodeFromRef(ref));\n    };\n\n    private onWillFocus = () => {\n      const { navigation, route } = this.props;\n\n      //console.log(\"onWillFocus: \", route);\n      if (isActiveRoute(navigation, route)) {\n        this.sceneData.updateRoute(route);\n        rendererData.updateSceneState(this.sceneData, \"willFocus\");\n        InteractionManager.runAfterInteractions(() => {\n          //console.log(\"onDidFocus: \", this.props.route);\n          this.sceneData.updateRoute(this.props.route);\n          rendererData.updateSceneState(this.sceneData, \"didFocus\");\n        });\n      }\n    };\n\n    private onWillBlur = () => {\n      const { route } = this.props;\n\n      //console.log(\"onWillBlur: \", route);\n      this.sceneData.updateRoute(route);\n      //rendererData.updateSceneState(this.sceneData, \"willBlur\");\n    };\n  }\n\n  hoistNonReactStatics(SharedElementSceneView, Component);\n  return SharedElementSceneView;\n}\n\nexport default createSharedElementScene;\n"]}